# If you come from bash you might have to change your $PATH.
export MPLBACKEND="MacOSX"
export PATH="/usr/local/opt/ruby/bin:$PATH"
export PATH="$PATH:/usr/local/lib/ruby/gems/3.0.0/bin"
export PATH="$PATH:$HOME/.cargo/bin"
export GOPATH="$HOME/.go"
export PATH="/Users/kai/.local/bin:$PATH"
export HDF5_DIR=/opt/homebrew/opt/hdf5 
export EDITOR=nvim


pdfcompress ()
{
  if ! zparseopts -E -D -F -- c=copyflag -copy=copyflag h=help -help=help; then
    return -1
  fi
  if [[ ! -z $help ]]; then
    echo "Takes a bunch files as positional parameters. You can pass the -c flag to copy with new filename or --help/-h to show this text."
    return 0
  fi
  for i in "$@"; do
    outfile="$i".compressed.pdf
    printf "compressing $i  to $outfile\n"
    gs -q -dNOPAUSE -dBATCH -dSAFER -sDEVICE=pdfwrite -dCompatibilityLevel=1.3 -dPDFSETTINGS=/screen -dEmbedAllFonts=true -dSubsetFonts=true -dColorImageDownsampleType=/Bicubic -dColorImageResolution=144 -dGrayImageDownsampleType=/Bicubic -dGrayImageResolution=144 -dMonoImageDownsampleType=/Bicubic -dMonoImageResolution=144 -sOutputFile=$outfile "$i"; 
    if [[ ! -z $copyflag ]]; then
      printf "."
    else
      printf "overriding original $i\n"
      mv "$i".compressed.pdf "$i"
    fi
  done
}


printmany ()
{
  if ! zparseopts -E -D -F -- h=help -help=help; then
    return -1
  fi
  if [[ ! -z $help ]]; then
    echo "Takes a bunch files as positional parameters and sends them for printing to the NUC. Add --help/-h to show this text."
    return 0
  fi
  for i in "$@"; do
    printf "printing $i \n"
    scp "$i"  192.168.0.2:to_print.pdf ; ssh 192.168.0.2 'lp -o fit-to-page ~/to_print.pdf'
    sleep 3
  done
}



mergepdfs () { 
  if ! zparseopts -E -D -F -- h=help -help=help; then
    return -1
  fi
  if [[ ! -z $help ]]; then
    echo "Merges a bucnh of pdf files into one. Example: 'mergepdfs a.pdf b.pdf c.pdf' turns a.pdf and b.pdf into c.pdf. Add --help/-h to show this text."
    return 0
  fi
  gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile="$1" "${@:2}"
}


changes(){
  for dir in $HOME/Development/*/     # list directories absolute path
  do
      if [[ -d "$dir/.git" ]]; then
          if [[ -n  `git -C $dir status --porcelain` ]]; then
              echo "Uncommited changes in directory:  $dir"
              continue;
          fi
          if [[ -n `git -C $dir log --branches --not --remotes` ]]; then
              echo "Unpushed changes in directory: $dir "
          fi
      fi
  done
}


listenv(){
 ls  "$HOME/.envs"
}


rmenv(){
  if [ -z "$1" ]; then
    echo "No name for venv supplied"
    return 1
  fi
  echo "Remove environment at $HOME/.envs/$1 (y/n) ? "
  read answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    echo rm -r $HOME/.envs/$1
  else
    echo No
  fi
}


mkenv(){
 if [ -z "$1" ]; then
   echo "No name for venv supplied"
   return 1
 fi
 mkdir -p "$HOME/.envs"
 python3 -m venv "$HOME/.envs/$1"
 echo "Venv created at $HOME/.envs/$1"
 activate $1
 pip install ipython jupyter
 deactivate
}


activate(){
 if [ -z "$1" ]; then
   echo "No name for venv supplied"
   return 1
 fi
 if [ ! -d "$HOME/.envs/$1" ]; then
   echo "No venv with that name"
   return 1
 fi
 source "$HOME/.envs/$1/bin/activate"
}


#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"


alias gits="git status"
alias commit="git commit"
alias add="git add"
alias push="git push"
alias pull="git pull"
alias vim="nvim"
alias vimdiff="nvim -d"
alias ls="eza --icons"
alias lsa="eza -a --icons"
alias ll="eza -l --icons"
alias lla="eza -la --icons"
alias code="open -b com.microsoft.VSCode"

export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"


# bun completions
[ -s "/Users/kai/.bun/_bun" ] && source "/Users/kai/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"


## menu-style
zstyle ':completion:*' menu select
autoload -Uz compinit && compinit
zstyle ':completion:*' special-dirs true
# case insensitive
zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
# Tab completion colors
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
# add new installed packages into completions
zstyle ':completion:*' rehash true
# Use better completion for the kill command
#zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;34'
#zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
# use completion cache
zstyle ':completion::complete:*' use-cache true

bindkey '^[[Z' reverse-menu-complete
bindkey '^[[A' up-line-or-search
bindkey '^[[B' down-line-or-search
bindkey "^P" up-line-or-search
bindkey "^N" down-line-or-search


# history config
HISTSIZE=2000
SAVEHIST=2000
export HISTFILE="$XDG_DATA_HOME"/zsh/history
# share history across multiple zsh sessions
setopt SHARE_HISTORY
# append to history
setopt APPEND_HISTORY
# expire duplicates first
setopt HIST_EXPIRE_DUPS_FIRST
# do not store duplications
setopt HIST_IGNORE_DUPS
#ignore duplicates when searching
setopt HIST_FIND_NO_DUPS
# removes blank lines from history
setopt HIST_REDUCE_BLANKS
# Correction when you misstype
#setopt CORRECT
#setopt CORRECT_ALL
# use emacs bindings
set -o emacs


#auto suggestions
source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
set ZSH_AUTOSUGGEST_USE_ASYNC=true

source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main cursor)
typeset -gA ZSH_HIGHLIGHT_STYLES

#add for https://github.com/microsoft/vscode/issues/96741
bindkey "\e[3~" delete-char

# Default groupings per, https://spec.draculatheme.com, try to logically separate
# possible ZSH_HIGHLIGHT_STYLES settings accordingly...?
#
# Italics not yet supported by zsh; potentially soon:
#    https://github.com/zsh-users/zsh-syntax-highlighting/issues/432
#    https://www.zsh.org/mla/workers/2021/msg00678.html
# ... in hopes that they will, labelling accordingly with ,italic where appropriate
#
# Main highlighter styling: https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md
#
## General
### Diffs
### Markup
## Classes
## Comments
ZSH_HIGHLIGHT_STYLES[comment]='fg=#6272A4'
## Constants
## Entitites
## Functions/methods
ZSH_HIGHLIGHT_STYLES[alias]='fg=#FBE9FD,bold'
ZSH_HIGHLIGHT_STYLES[suffix-alias]='fg=#50FA7B'
ZSH_HIGHLIGHT_STYLES[global-alias]='fg=#50FA7B'
ZSH_HIGHLIGHT_STYLES[function]='fg=#50FA7B'
ZSH_HIGHLIGHT_STYLES[command]='fg=#50FA7B'
ZSH_HIGHLIGHT_STYLES[precommand]='fg=#50FA7B,italic'
ZSH_HIGHLIGHT_STYLES[autodirectory]='fg=#FFB86C,italic'
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]='fg=#FFB86C'
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]='fg=#FFB86C'
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]='fg=#BD93F9'
## Keywords
## Built ins
ZSH_HIGHLIGHT_STYLES[builtin]='fg=#FBE9FD,bold'
ZSH_HIGHLIGHT_STYLES[reserved-word]='fg=#8BE9FD'
ZSH_HIGHLIGHT_STYLES[hashed-command]='fg=#8BE9FD'
## Punctuation
ZSH_HIGHLIGHT_STYLES[commandseparator]='fg=#FF79C6'
ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter-unquoted]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[process-substitution-delimiter]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[back-quoted-argument-delimiter]='fg=#FF79C6'
ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]='fg=#FF79C6'
ZSH_HIGHLIGHT_STYLES[back-dollar-quoted-argument]='fg=#FF79C6'
## Serializable / Configuration Languages
## Storage
## Strings
ZSH_HIGHLIGHT_STYLES[command-substitution-quoted]='fg=#F1FA8C'
ZSH_HIGHLIGHT_STYLES[command-substitution-delimiter-quoted]='fg=#F1FA8C'
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]='fg=#F1FA8C'
ZSH_HIGHLIGHT_STYLES[single-quoted-argument-unclosed]='fg=#FF5555'
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]='fg=#F1FA8C'
ZSH_HIGHLIGHT_STYLES[double-quoted-argument-unclosed]='fg=#FF5555'
ZSH_HIGHLIGHT_STYLES[rc-quote]='fg=#F1FA8C'
## Variables
ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[dollar-quoted-argument-unclosed]='fg=#FF5555'
ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[assign]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[named-fd]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[numeric-fd]='fg=#F8F8F2'
## No category relevant in spec
ZSH_HIGHLIGHT_STYLES[unknown-token]='fg=#FF5555'
ZSH_HIGHLIGHT_STYLES[path]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[path_pathseparator]='fg=#FF79C6'
ZSH_HIGHLIGHT_STYLES[path_prefix]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[path_prefix_pathseparator]='fg=#FF79C6'
ZSH_HIGHLIGHT_STYLES[globbing]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[history-expansion]='fg=#BD93F9'
#ZSH_HIGHLIGHT_STYLES[command-substitution]='fg=?'
#ZSH_HIGHLIGHT_STYLES[command-substitution-unquoted]='fg=?'
#ZSH_HIGHLIGHT_STYLES[process-substitution]='fg=?'
#ZSH_HIGHLIGHT_STYLES[arithmetic-expansion]='fg=?'
ZSH_HIGHLIGHT_STYLES[back-quoted-argument-unclosed]='fg=#FF5555'
ZSH_HIGHLIGHT_STYLES[redirection]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[arg0]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[default]='fg=#F8F8F2'
ZSH_HIGHLIGHT_STYLES[cursor]='standout'
eval "$(starship init zsh)"

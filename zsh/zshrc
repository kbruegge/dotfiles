# If you come from bash you might have to change your $PATH.
export MPLBACKEND="MacOSX"
# export PATH="$PATH:/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin"
export PATH="/usr/local/opt/ruby/bin:$PATH"
export PATH="$PATH:/usr/local/lib/ruby/gems/3.0.0/bin"
export PATH="$PATH:$HOME/.cargo/bin"
export GOPATH="$HOME/.go"
export PATH="/Users/kai/.local/bin:$PATH"
export HDF5_DIR=/opt/homebrew/opt/hdf5 
export EDITOR=nvim



pdfcompress ()
{
  if ! zparseopts -E -D -F -- c=copyflag -copy=copyflag h=help -help=help; then
    return -1
  fi
  if [[ ! -z $help ]]; then
    echo "Takes a bunch files as positional parameters. You can pass the -c flag to copy with new filename or --help/-h to show this text."
    return 0
  fi
  for i in "$@"; do
    outfile="$i".compressed.pdf
    printf "compressing $i  to $outfile\n"
    gs -q -dNOPAUSE -dBATCH -dSAFER -sDEVICE=pdfwrite -dCompatibilityLevel=1.3 -dPDFSETTINGS=/screen -dEmbedAllFonts=true -dSubsetFonts=true -dColorImageDownsampleType=/Bicubic -dColorImageResolution=144 -dGrayImageDownsampleType=/Bicubic -dGrayImageResolution=144 -dMonoImageDownsampleType=/Bicubic -dMonoImageResolution=144 -sOutputFile=$outfile "$i"; 
    if [[ ! -z $copyflag ]]; then
      printf "."
    else
      printf "overriding original $i\n"
      mv "$i".compressed.pdf "$i"
    fi
  done
}


printmany ()
{
  if ! zparseopts -E -D -F -- h=help -help=help; then
    return -1
  fi
  if [[ ! -z $help ]]; then
    echo "Takes a bunch files as positional parameters and sends them for printing to the NUC. Add --help/-h to show this text."
    return 0
  fi
  for i in "$@"; do
    printf "printing $i \n"
    scp "$i"  192.168.0.2:to_print.pdf ; ssh 192.168.0.2 'lp -o fit-to-page ~/to_print.pdf'
    sleep 3
  done
}



mergepdfs () { 
  if ! zparseopts -E -D -F -- h=help -help=help; then
    return -1
  fi
  if [[ ! -z $help ]]; then
    echo "Merges a bucnh of pdf files into one. Example: 'mergepdfs a.pdf b.pdf c.pdf' turns a.pdf and b.pdf into c.pdf. Add --help/-h to show this text."
    return 0
  fi
  gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile="$1" "${@:2}"
}


changes(){
  for dir in $HOME/Development/*/     # list directories absolute path
  do
      if [[ -d "$dir/.git" ]]; then
          if [[ -n  `git -C $dir status --porcelain` ]]; then
              echo "Uncommited changes in directory:  $dir"
              continue;
          fi
          if [[ -n `git -C $dir log --branches --not --remotes` ]]; then
              echo "Unpushed changes in directory: $dir "
          fi
      fi
  done
}


listenv(){
 ls  "$HOME/.envs"
}


rmenv(){
  if [ -z "$1" ]; then
    echo "No name for venv supplied"
    return 1
  fi
  echo "Remove environment at $HOME/.envs/$1 (y/n) ? "
  read answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    echo rm -r $HOME/.envs/$1
  else
    echo No
  fi
}


mkenv(){
 if [ -z "$1" ]; then
   echo "No name for venv supplied"
   return 1
 fi
 mkdir -p "$HOME/.envs"
 python3 -m venv "$HOME/.envs/$1"
 echo "Venv created at $HOME/.envs/$1"
 activate $1
 pip install ipython jupyter
 deactivate
}


activate(){
 if [ -z "$1" ]; then
   echo "No name for venv supplied"
   return 1
 fi
 if [ ! -d "$HOME/.envs/$1" ]; then
   echo "No venv with that name"
   return 1
 fi
 source "$HOME/.envs/$1/bin/activate"
}


#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"


alias gits="git status"
alias commit="git commit"
alias add="git add"
alias push="git push"
alias pull="git pull"
alias vim="nvim"
alias vimdiff="nvim -d"
alias ls="eza --icons"
alias lsa="eza -a --icons"
alias ll="eza -l --icons"
alias lla="eza -la --icons"
alias code="open -b com.microsoft.VSCode"

export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"


# bun completions
[ -s "/Users/kai/.bun/_bun" ] && source "/Users/kai/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
eval "$(starship init zsh)"
